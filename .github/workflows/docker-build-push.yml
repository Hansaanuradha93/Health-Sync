name: Build, Push Docker Images to ECR, and Deploy to EKS

on:
  push:
    branches:
      - cicd

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment for linting and testing
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Step 3: Install dependencies for each microservice
      - name: Install dependencies for authentication-service
        run: |
          cd authentication-service
          npm install

      - name: Install dependencies for patient-record-service
        run: |
          cd patient-record-service
          npm install

      - name: Install dependencies for notification-service
        run: |
          cd notification-service
          npm install

      - name: Install dependencies for appointment-service
        run: |
          cd appointment-service
          npm install

      - name: Install dependencies for doctor-service
        run: |
          cd doctor-service
          npm install

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Build and push Docker images
      - name: Build and push Docker images
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          SERVICES=("authentication-service" "patient-record-service" "notification-service" "appointment-service" "doctor-service" "api-gateway")
          for SERVICE in "${SERVICES[@]}"
          do
            docker build -t $ECR_REPOSITORY_URL/$SERVICE:$IMAGE_TAG ./$SERVICE
            docker push $ECR_REPOSITORY_URL/$SERVICE:$IMAGE_TAG
            echo "$SERVICE:$IMAGE_TAG" >> image-tags.txt
          done
        env:
          ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }}

      # Save the image tags for later use in deployment
      - name: Save image tags
        uses: actions/upload-artifact@v3
        with:
          name: image-tags
          path: image-tags.txt

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Retrieve image tags
      - name: Download image tags
        uses: actions/download-artifact@v3
        with:
          name: image-tags

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name health-sync-cluster

      - name: Verify Kubernetes Context
        run: kubectl config view

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s-manifests/

      # Step 5: Update Kubernetes deployments
      - name: Deploy to EKS
        run: |
          while IFS= read -r line; do
            SERVICE=$(echo $line | cut -d: -f1)
            IMAGE_TAG=$(echo $line | cut -d: -f2)
            kubectl set image deployment/$SERVICE $SERVICE=$ECR_REPOSITORY_URL/$SERVICE:$IMAGE_TAG
          done < image-tags.txt
