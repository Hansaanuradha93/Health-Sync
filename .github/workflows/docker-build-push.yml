name: Build, Push Docker Images to ECR, and Deploy to EKS

on:
  push:
    branches:
      - cicd

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment for linting and testing
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Step 3: Install dependencies for each microservice
      - name: Install dependencies for each service
        run: |
          SERVICES=("authentication-service" "patient-record-service" "notification-service" "appointment-service" "doctor-service" "api-gateway")
          for SERVICE in "${SERVICES[@]}"
          do
            cd $SERVICE
            npm install
            cd ..
          done

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Build and push Docker images with :latest tag
      - name: Build and push Docker images
        run: |
          SERVICES=("authentication-service" "patient-record-service" "notification-service" "appointment-service" "doctor-service" "api-gateway")
          for SERVICE in "${SERVICES[@]}"
          do
            docker build -t $ECR_REPOSITORY_URL/$SERVICE:latest ./$SERVICE
            docker push $ECR_REPOSITORY_URL/$SERVICE:latest
          done
        env:
          ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }}

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name health-sync-cluster

      - name: Verify Kubernetes Context
        run: |
          kubectl config get-contexts
          kubectl config current-context

      - name: Check Cluster Info
        run: |
          kubectl cluster-info

      - name: List Nodes
        run: |
          kubectl get nodes

      # Step 4: Apply Kubernetes manifests
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f config-map.yaml
          kubectl apply -f api-gateway-deployment.yaml
          kubectl apply -f appointment-deployment.yaml
          kubectl apply -f authentication-deployment.yaml
          kubectl apply -f doctor-deployment.yaml
          kubectl apply -f notification-deployment.yaml
          kubectl apply -f patient-record-deployment.yaml
          kubectl apply -f report-deployment.yaml
