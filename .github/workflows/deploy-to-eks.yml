name: Deploy to EKS

on:
  workflow_run:
    workflows:
      - Build and Push Docker Images to ECR
    types:
      - completed

jobs:
  deploy-to-eks:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name health-sync-cluster

      # Step 4: Apply Kubernetes manifests
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f config-map.yaml
          kubectl apply -f api-gateway-deployment.yaml
          kubectl apply -f appointment-deployment.yaml
          kubectl apply -f authentication-deployment.yaml
          kubectl apply -f doctor-deployment.yaml
          kubectl apply -f notification-deployment.yaml
          kubectl apply -f patient-record-deployment.yaml
          kubectl apply -f report-deployment.yaml

      # Step 5: Wait for deployments to be ready
      - name: Wait for pods to be ready
        run: |
          kubectl wait --for=condition=ready pod -l app=api-gateway --timeout=120s
          kubectl wait --for=condition=ready pod -l app=patient-record-service --timeout=120s
          kubectl wait --for=condition=ready pod -l app=appointment-service --timeout=120s

  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-eks

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Run Integration Tests
      - name: Run integration tests
        run: |
          curl -X http://ad36db3775bff4ddf98251312f2a7e8a-1830202517.us-west-1.elb.amazonaws.com:8080/api/v1/patients \
            -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3NGM4YTY1MmVkNTBiMmM3YmMyMTJjNyIsImlhdCI6MTczNDQzOTUyMiwiZXhwIjoxNzM1MDQ0MzIyfQ.LnBgnQjPK6mPKX8sCXalfJGunK8WZdC_xzNg_TEslWk" \
            -H "Content-Type: application/json"

          curl -X GET http://ad36db3775bff4ddf98251312f2a7e8a-1830202517.us-west-1.elb.amazonaws.com:8080/api/v1/appointments \
            -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3NGM4YTY1MmVkNTBiMmM3YmMyMTJjNyIsImlhdCI6MTczNDQzOTUyMiwiZXhwIjoxNzM1MDQ0MzIyfQ.LnBgnQjPK6mPKX8sCXalfJGunK8WZdC_xzNg_TEslWk" \
            -H "Content-Type: application/json"
